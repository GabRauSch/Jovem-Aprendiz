{
    "challenges": [
        {
            "id": 1,
            "title": "Porta errada",
            "problem": "A porta no nosso servidor está errada! ajeite isso e torne as coisas mais fáceis para a vida dos programadores que vão usar seu código no futuro!",
            "tips": [
                "O problema se encontra no server.ts",
                "Ao fazer o deploy do projeto, a nossa porta pode mudar, temos que arranjar um método para que seja possivel não precisar reescrever nenhum código quando formos por no ar.",
                "não basta mudar o console log ou a porta para resolver o problema... lembre que se esse problema ocorreu uma vez, algum outro programador pode vir e cometê-lo novamente",
                "utilize uma biblioteca chamada dotenv, dentro do arquivo, sete a porta para 3000",
                "<div>dentro do arquivo .env, que deve ficar na raiz do projeto, ponha:</div><i class='codeTitle'>.env</i><div class='codeHide'>PORT=3000</div><div>no seu server.ts escreva:</div><i class='codeTitle'>server.ts</i><div class='codeHide'> import dotenv from 'dotenv';<br>dotenv.config();<br>server.listen(process.env.PORT);</div>"
            ],
            "resolved": false
        },
        {
            "id": 2,
            "title": "Repositorio apresenta pasta NodeModules",
            "problem": "Nosso repositório do GitHub apresenta a pasta NodeModules, que é a pasta com todo o conteúdo de dependencias do nosso node. O problema com isso é que esta pasta é muita pesada e guardar ela no nosso git pode ocasionar alguns problemas. Faça com que nosso repositorio no GIT não contenha mais a nossa pasta pesada node_modules",
            "tips": [
                "Faça o git ignorar a pasta",
                "Crie um arquivo .gitignore",
                "Referencie a pasta node_modules no arquivo criado",
                "<div>dentro do arquivo .gitignore, que deve ficar na raiz do projeto, ponha:</div><i class='codeTitle'>.gitignore</i><div class='codeHide'>node_modules</div>"
            ],
            "resolved": false
        },
        {
            "id": 3,
            "title": "Estamos usando Typescript",
            "problem": "Este código está suportando e compilando nosso código em Typescript. Estamos configurando tudo certinho no tsconfig.json, mas o programador que iniciou o projeto se esqueceu disso quando começou a criá-lo, e agora temos que resolver uma de suas prezepadas! No arquivo Challenges.ts, nosso arquivo de rotas temos dois requires sendo usados, vamos fazer um 'import' no lugar",
            "tips": [
                "Precisamos importar o Router e o nosso ChallengesController.",
                "programação se escreve em ingles, e precisamos IMPORTAR o Router DO express bem como IMPORTAR todas as funções e nomear sua raiz ChallengeController do ChallengeController <-- confuso pra caralho, mas é bem simples",
                "Import {Router} from 'express' e import * as ChallengesController from '../controllers/ChallengesController'",
                "<div>dentro do arquivo Challenges.ts, que deve ficar na pasta routes do projeto, ponha:</div><i class='codeTitle'>Challenges.ts</i><div class='codeHide'>import {Router} from 'express'<br> import * as ChallengesController from '../challengesController'</div>"
            ],
            "resolved": false
        },
        {
            "id": 4,
            "title": "Vamos começar a tornar o negocio mais serio",
            "problem": "A partir de agora, os desafios incluirão bibliotecas e outras paradas... já utilizamos algumas bilbiotecas, você consegue listar elas? Crie um arquivo de respostas a esse desafio (e pode ser um txt, faça do jeito que preferir) e liste as dependencias que estamos utilizando no código até agr.",
            "tips": [
                "Dependência, lembrando, são aquelas bibliotecas que vem com o código pronto para você usar.",
                "As dependencias estão com seus códigos instalados no Node_modules, porém temos que criar uma referência a elas para que seja possivel instalar elas sem levar o nodemodules ao git.",
                "Essas dependências se encontram o arquivo package.json, na raiz do projeto. Temos dependências normais e as chamadas devdependencies, essa segunda são dependencias que ajudam no desenvolvimento do código, mas para o deploy podem ser \"jogadas fora\"",
                "<div>dentro do arquivo package.json, encontre uma array chamada \"dependencies\". Dentro dessa array temos listadas as dependencias do projeto. logo abaixo temos as devdependencies </div><i class='codeTitle'>package.json</i><div class='codeHide'>\"dependencies\":{<br>\"@types/dotenv\": \"^8.2.0\",<br>\"express\": \"^4.18.2\"<br>}</div>"
            ],
            "resolved": false
        },
        {
            "id": 5,
            "title": "Tirando onda!",
            "problem": "Os titulos dos desafios começarão a ficar mais cringe... Mas, vamos resolver um problema com as nossas dependencias. Não podemos ter um type nas nossas dependencias normais do projeto, eles devem ficar no devDependencies.",
            "tips": [
                "Dependência, lembrando, são aquelas bibliotecas que vem com o código pronto para você usar.",
                "Os types são dependências que são usadas apenas pelo typescript, para te ajudar no desenvolvimento do código. Não faz nenhum sentido mandar para o servidor final esses arquivos.",
                "Essas dependências se encontram o arquivo package.json, na raiz do projeto. Temos dependências normais e as chamadas devdependencies, temos que reposicionar os @types para o seu lugar.",
                "<div>dentro do arquivo package.json, encontre uma array chamada \"devDependencies\". Dentro dessa array temos listadas as dependencias de desenvolvimento do projeto. Tire a dependência @types/dotenv do dependencies e ponha no devDependencies, ficando assim:</div><i class='codeTitle'>package.json</i><div class='codeHide'>\"devDependencies\":{<br>\"@types/dotenv\": \"^8.2.0\",<br>\"@types/express\": \"^4.17.17\"<br>}</div>"
            ],
            "resolved": false
        },
        {
            "id": 6,
            "title": "Criando nosso primeiro endpoint",
            "problem": "Já resolvemos muitas coisas chatas que fazem parte da vida do programador backend. Agora está na hora de começarmos na parte boa da profissão: criar as paradas. Para esse desafio, crie um endpoint que realiza uma chamada na url '/listChallenges'. Por agora, faça com que o endpoint responda com um json: {res: \"Sua mensagem personalizada aqui\"}",
            "tips": [
                "Os endpoints devem ficar na pasta routes.",
                "Você pode utilizar o arquivo Challenges.ts, como o endpoint se trata de um 'listChallenges', não há problemas em usar as rotas de desafio",
                "Utilize as setinhas que abreviam o código no visual studio para ajudar a desenvolver o código dentro do controller (se for utilizar, claro)",
                "Crie uma nova rota no Routes que chama pelo método GET o seu endpoint (como é uma listagem, o método adequado é o GET)",
                
                "<div>dentro do arquivo routes/Challenges.ts, crie uma função como a seguir: </div><i class='codeTitle'>Challenges.ts</i><div class='codeHide'>router.get('/listChallenges', ChallengeController.listChallenges);</div>",
                "<div>dentro do arquivo controllers/ChallengesController.ts, crie uma função como a seguir: </div><i class='codeTitle'>ChallengesController.ts</i><div class='codeHide'>export const listChallenges = (req: Request, res: Response) => {<br>res.json({msg: 'Vai começar a ficar dificil pra C***** isso aqui, melhor correr... mas sem pressão!'})<br>}</div>",
                "Realize a chamada dele no postman com <i>localhost:3000/listChallenges</i>"
            ],
            "resolved": false
        },
        {
            "id": 7,
            "title": "Fazendo o endpoint funcionar",
            "problem": "Esse desafio é o mais dificil até agora, e podemos chamar ele de chefão 1. Porque pqp... basicamente seu papel aqui será o de ler esse arquivo no seu código e listar os titulos e problemas dos desafios na chamada do seu endpoint criado.",
            "tips": [
                "utilize a biblioteca fs-extra e seu type @types/fs-extra para realizar a leitura do arquivo (leia a documentação, utilize o chat lgbt ou o que for para aprender a utilizá-la.",
                "Crie uma nova rota no Routes que chama pelo método GET o seu endpoint (como é uma listagem, o método adequado é o GET)",                
                "O objeto de resposta pode ser chamado de data, um array que contém objetos com títulos e problemas",
                "data:[{\"title\":\"tal\", \"problem\":\"problem tal tal\"}]. Seu payload vai ficar assim",
                "Realize a chamada dele no postman com <i>localhost:3000/listChallenges</i>"
            ],
            "resolved": false
        }

    ]

}